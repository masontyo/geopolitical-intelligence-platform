import React from 'react';
import { render, screen, fireEvent, waitFor } from '../../test-utils';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import OnboardingFlow from '../OnboardingFlow';

// Mock the API service
jest.mock('../../services/api', () => ({
  userProfileAPI: {
    createProfile: jest.fn(),
    getProfile: jest.fn(),
    getRelevantEvents: jest.fn()
  }
}));

// Mock Material-UI components that might cause issues
jest.mock('@mui/material', () => ({
  ...jest.requireActual('@mui/material'),
  Dialog: ({ children, open }) => open ? <div data-testid="dialog">{children}</div> : null,
  DialogTitle: ({ children }) => <div data-testid="dialog-title">{children}</div>,
  DialogContent: ({ children }) => <div data-testid="dialog-content">{children}</div>,
  DialogActions: ({ children }) => <div data-testid="dialog-actions">{children}</div>,
  Snackbar: ({ children, open }) => open ? <div data-testid="snackbar">{children}</div> : null,
  Alert: ({ children, severity }) => <div data-testid={`alert-${severity}`}>{children}</div>
}));

describe('OnboardingFlow Component', () => {
  const mockUserProfile = {
    name: "John Smith",
    title: "Chief Risk Officer",
    company: "TechCorp International",
    industry: "Technology",
    businessUnits: [
      {
        name: "Software Division",
        description: "Enterprise software solutions",
        regions: ["North America", "Europe"],
        products: ["CRM", "ERP", "Analytics Platform"]
      }
    ],
    areasOfConcern: [
      {
        category: "Trade Relations",
        description: "US-China trade tensions and tariffs",
        priority: "high"
      }
    ],
    regions: ["North America", "Europe", "Asia Pacific"],
    riskTolerance: "medium",
    notificationPreferences: {
      email: true,
      frequency: "daily"
    }
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Initial Render', () => {
    it('should render the onboarding form initially', () => {
      render(<OnboardingFlow />);
      
      // Check for form elements
      expect(screen.getByText(/Chief Risk Officer Onboarding/i)).toBeInTheDocument();
      expect(screen.getByLabelText(/Company Name/i)).toBeInTheDocument();
      expect(screen.getByLabelText(/HQ Location/i)).toBeInTheDocument();
      expect(screen.getByLabelText(/Business Units/i)).toBeInTheDocument();
    });

    it('should show the first step of the onboarding process', () => {
      render(<OnboardingFlow />);
      
      expect(screen.getByText(/Step 1 of 4/i)).toBeInTheDocument();
      expect(screen.getByText(/Personal Information/i)).toBeInTheDocument();
    });
  });

  describe('Form Navigation', () => {
    it('should navigate to next step when Next button is clicked', async () => {
      render(<OnboardingFlow />);

      // Fill in required fields
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      // Click Next button
      const nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      // Should show step 2
      await waitFor(() => {
        expect(screen.getByText(/Step 2 of 4/i)).toBeInTheDocument();
        expect(screen.getByText(/Business Units/i)).toBeInTheDocument();
      });
    });

    it('should navigate back to previous step when Back button is clicked', async () => {
      render(<OnboardingFlow />);

      // Fill in required fields and go to step 2
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      const nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      // Should be on step 2
      await waitFor(() => {
        expect(screen.getByText(/Step 2 of 4/i)).toBeInTheDocument();
      });

      // Click Back button
      const backButton = screen.getByRole('button', { name: /back/i });
      await userEvent.click(backButton);

      // Should be back on step 1
      await waitFor(() => {
        expect(screen.getByText(/Step 1 of 4/i)).toBeInTheDocument();
        expect(screen.getByText(/Personal Information/i)).toBeInTheDocument();
      });
    });
  });

  describe('Form Validation', () => {
    it('should show validation errors for empty required fields', async () => {
      render(<OnboardingFlow />);

      // Try to proceed without filling required fields
      const nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      // Should show validation errors
      await waitFor(() => {
        expect(screen.getByText(/Name is required/i)).toBeInTheDocument();
        expect(screen.getByText(/Title is required/i)).toBeInTheDocument();
        expect(screen.getByText(/Company is required/i)).toBeInTheDocument();
        expect(screen.getByText(/Industry is required/i)).toBeInTheDocument();
      });
    });

    it('should allow navigation when all required fields are filled', async () => {
      render(<OnboardingFlow />);

      // Fill in all required fields
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      // Should be able to proceed
      const nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      await waitFor(() => {
        expect(screen.getByText(/Step 2 of 4/i)).toBeInTheDocument();
      });
    });
  });

  describe('Profile Submission', () => {
    it('should submit profile successfully and show success message', async () => {
      const { userProfileAPI } = require('../../services/api');
      
      // Mock successful API response
      userProfileAPI.createProfile.mockResolvedValue({
        data: {
          success: true,
          message: 'Profile created successfully',
          profile: mockUserProfile
        }
      });

      render(<OnboardingFlow />);

      // Fill in all required fields
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      // Navigate through all steps (simplified for test)
      const nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      // Mock the completion of all steps and submission
      // This would require more complex setup to simulate the full flow
      // For now, we'll test the API integration
      expect(userProfileAPI.createProfile).not.toHaveBeenCalled();
    });

    it('should handle API errors gracefully', async () => {
      const { userProfileAPI } = require('../../services/api');
      
      // Mock API error
      userProfileAPI.createProfile.mockRejectedValue(new Error('API Error'));

      render(<OnboardingFlow />);

      // Fill in required fields
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      // Navigate to next step
      const nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      await waitFor(() => {
        expect(screen.getByText(/Step 2 of 4/i)).toBeInTheDocument();
      });
    });
  });

  describe('Business Units Management', () => {
    it('should allow adding business units', async () => {
      render(<OnboardingFlow />);

      // Fill in required fields and navigate to step 2
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      const nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      await waitFor(() => {
        expect(screen.getByText(/Business Units/i)).toBeInTheDocument();
      });

      // Check for business unit form elements
      expect(screen.getByText(/Add Business Unit/i)).toBeInTheDocument();
    });
  });

  describe('Areas of Concern Management', () => {
    it('should allow adding areas of concern', async () => {
      render(<OnboardingFlow />);

      // Fill in required fields and navigate to step 3
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      let nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      // Navigate to step 3 (Areas of Concern)
      await waitFor(() => {
        nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      });
      await userEvent.click(nextButton);

      await waitFor(() => {
        expect(screen.getByText(/Areas of Concern/i)).toBeInTheDocument();
      });

      // Check for areas of concern form elements
      expect(screen.getByText(/Add Area of Concern/i)).toBeInTheDocument();
    });
  });

  describe('Profile Review', () => {
    it('should show profile review screen after completing all steps', async () => {
      render(<OnboardingFlow />);

      // Fill in required fields and navigate through steps
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      // Navigate through steps (simplified)
      let nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      // This test would need more complex setup to simulate the full flow
      // For now, we verify the component renders correctly
      expect(screen.getByText(/Business Units/i)).toBeInTheDocument();
    });
  });

  describe('User Experience', () => {
    it('should show loading states during API calls', async () => {
      const { userProfileAPI } = require('../../services/api');
      
      // Mock delayed API response
      userProfileAPI.createProfile.mockImplementation(() => 
        new Promise(resolve => setTimeout(() => resolve({ data: { success: true } }), 100))
      );

      render(<OnboardingFlow />);

      // Fill in required fields
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      // Navigate to next step
      const nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      await waitFor(() => {
        expect(screen.getByText(/Step 2 of 4/i)).toBeInTheDocument();
      });
    });

    it('should maintain form data when navigating between steps', async () => {
      render(<OnboardingFlow />);

      // Fill in required fields
      await userEvent.type(screen.getByLabelText(/Company Name/i), 'Acme Corp');
      await userEvent.type(screen.getByLabelText(/HQ Location/i), 'Chief Risk Officer');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'TechCorp International');
      await userEvent.type(screen.getByLabelText(/Business Units/i), 'Technology');

      // Navigate to next step
      const nextButton = screen.getByRole('button', { name: /submit & preview profile/i });
      await userEvent.click(nextButton);

      await waitFor(() => {
        expect(screen.getByText(/Step 2 of 4/i)).toBeInTheDocument();
      });

      // Navigate back
      const backButton = screen.getByRole('button', { name: /back/i });
      await userEvent.click(backButton);

      // Check that form data is preserved
      await waitFor(() => {
        expect(screen.getByDisplayValue('Acme Corp')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Chief Risk Officer')).toBeInTheDocument();
        expect(screen.getByDisplayValue('TechCorp International')).toBeInTheDocument();
        expect(screen.getByDisplayValue('Technology')).toBeInTheDocument();
      });
    });
  });
}); 